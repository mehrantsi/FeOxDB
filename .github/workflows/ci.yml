name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: self-hosted
    strategy:
      matrix:
        os: [self-hosted]
        rust: [stable, beta, nightly]
    steps:
      - uses: actions/checkout@v4
      
      # - name: Install Rust
      #   uses: dtolnay/rust-toolchain@master
      #   with:
      #     toolchain: ${{ matrix.rust }}
      #     components: rustfmt, clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Check formatting
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          cargo fmt -- --check
        if: matrix.rust == 'stable'
      
      - name: Run clippy
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          cargo clippy --all-features -- -D warnings
        if: matrix.rust == 'stable'
      
      - name: Build
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          cargo build --verbose --all-features
      
      - name: Run tests
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          cargo test --verbose --all-features
        timeout-minutes: 10
      
      - name: Build examples
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          cargo build --example deterministic_test --release
          cargo build --example persistence_test --release
      
      - name: Run deterministic test
        run: ./target/release/examples/deterministic_test 1000 10
        if: matrix.os != 'windows-latest'
        timeout-minutes: 5
      
      - name: Run deterministic test (Windows)
        run: ./target/release/examples/deterministic_test.exe 1000 10
        if: matrix.os == 'windows-latest'
        timeout-minutes: 5

  coverage:
    name: Code Coverage
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      
      # - name: Install Rust stable
      #   uses: dtolnay/rust-toolchain@stable
      #   with:
      #     components: llvm-tools-preview
      
      - name: Install cargo-llvm-cov
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          cargo install cargo-llvm-cov || true
      
      - name: Generate code coverage
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          # Generate both lcov and HTML reports
          cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
          cargo llvm-cov --all-features --workspace --html
        timeout-minutes: 10
      
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: target/llvm-cov/html/

  security-audit:
    name: Security Audit
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      
      # - name: Install Rust stable
      #   uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-audit
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          cargo install cargo-audit || true
      
      - name: Run security audit
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          cargo audit

  docs:
    name: Documentation
    runs-on: self-hosted
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      
      # - name: Install Rust stable
      #   uses: dtolnay/rust-toolchain@stable
      
      - name: Build documentation
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          cargo doc --no-deps --all-features
        env:
          RUSTDOCFLAGS: -D warnings
      
      - name: Add redirect index.html
        run: |
          echo '<meta http-equiv="refresh" content="0; url=feoxdb/index.html">' > target/doc/index.html
      
      - name: Upload docs artifact
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: target/doc/